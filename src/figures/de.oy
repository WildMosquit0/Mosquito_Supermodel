import os
import math
import random
from itertools import islice

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image, ImageStat, ImageDraw
import numpy as np

# -------------------------------
# Utility functions for image metrics
# -------------------------------

def compute_entropy(image_gray):
    """
    Compute the entropy of a grayscale image.
    """
    hist = image_gray.histogram()
    total = sum(hist)
    # Avoid log2(0) by ignoring zero counts
    p = [count / total for count in hist if count > 0]
    entropy = -sum(pi * math.log2(pi) for pi in p)
    return entropy

def get_image_factors(image_path):
    """
    Compute brightness, contrast, entropy, and aspect ratio for an image.
    The image is processed in grayscale.
    """
    try:
        with Image.open(image_path) as img:
            img = img.convert("L")  # use grayscale for these metrics
            stat = ImageStat.Stat(img)
            brightness = stat.mean[0]
            contrast = stat.stddev[0]
            entropy = compute_entropy(img)
            width, height = img.size
            aspect_ratio = width / height if height else np.nan
            return {
                "Image": os.path.basename(image_path),
                "Brightness": brightness,
                "Contrast": contrast,
                "Entropy": entropy,
                "Aspect_Ratio": aspect_ratio
            }
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return None

def get_bbox_factors(image, annotation_line):
    """
    Given a PIL image and a YOLO annotation line (with normalized values),
    crop the bbox region, and compute brightness, contrast, entropy.
    The bbox aspect ratio is computed directly from the annotation (w_rel/h_rel).
    The annotation format is assumed to be:
         class x_center y_center w_rel h_rel
    """
    parts = annotation_line.strip().split()
    if len(parts) != 5:
        return None
    try:
        cls = parts[0]
        x_center, y_center, w_rel, h_rel = map(float, parts[1:])
    except Exception as e:
        print(f"Error parsing annotation line: {annotation_line} - {e}")
        return None

    img_width, img_height = image.size
    x_center_abs = x_center * img_width
    y_center_abs = y_center * img_height
    w_abs = w_rel * img_width
    h_abs = h_rel * img_height

    left = int(max(x_center_abs - w_abs/2, 0))
    top = int(max(y_center_abs - h_abs/2, 0))
    right = int(min(x_center_abs + w_abs/2, img_width))
    bottom = int(min(y_center_abs + h_abs/2, img_height))
    if right - left < 2 or bottom - top < 2:
        # Too small to compute reliable statistics
        return None

    bbox_region = image.crop((left, top, right, bottom)).convert("L")
    stat = ImageStat.Stat(bbox_region)
    brightness = stat.mean[0]
    contrast = stat.stddev[0]
    entropy = compute_entropy(bbox_region)
    # Use the annotation's normalized values to compute the aspect ratio
    aspect_ratio = w_rel / h_rel if h_rel != 0 else np.nan
    return {
        "BBox_Brightness": brightness,
        "BBox_Contrast": contrast,
        "BBox_Entropy": entropy,
        "BBox_Aspect_Ratio": aspect_ratio
    }

# -------------------------------
# Functions to compute factors for all images / bounding boxes
# -------------------------------

def compute_all_image_factors(images_folder):
    """
    Process all .jpg images in images_folder and return a DataFrame with the factors.
    """
    image_files = [os.path.join(images_folder, f) for f in os.listdir(images_folder)
                   if f.lower().endswith('.jpg')]
    records = []
    for img_file in image_files:
        factors = get_image_factors(img_file)
        if factors:
            records.append(factors)
    return pd.DataFrame(records)

def compute_all_bbox_factors(images_folder, labels_folder):
    """
    For each annotation file in labels_folder (assumed YOLO format),
    open the corresponding image from images_folder, and compute bbox factors.
    Returns a DataFrame with one row per bbox.
    """
    bbox_records = []
    label_files = [os.path.join(labels_folder, f) for f in os.listdir(labels_folder)
                   if f.lower().endswith('.txt')]
    for label_file in label_files:
        base = os.path.splitext(os.path.basename(label_file))[0]
        image_path = os.path.join(images_folder, base + ".jpg")
        if not os.path.exists(image_path):
            print(f"Image {image_path} not found for annotation {label_file}.")
            continue
        try:
            with Image.open(image_path) as img:
                img_rgb = img.convert("RGB")  # use original for cropping
                with open(label_file, 'r') as f:
                    lines = f.readlines()
                for idx, line in enumerate(lines):
                    bbox = get_bbox_factors(img_rgb, line)
                    if bbox:
                        bbox["Image"] = os.path.basename(image_path)
                        bbox["BBox_Index"] = idx
                        bbox_records.append(bbox)
        except Exception as e:
            print(f"Error processing {label_file}: {e}")
    return pd.DataFrame(bbox_records)

# -------------------------------
# Plotting functions
# -------------------------------

def plot_correlation_matrix(df, title, output_path):
    """
    Plot and save a correlation matrix heatmap for the given DataFrame.
    """
    corr = df.corr()
    plt.figure(figsize=(8, 6))
    sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
    plt.title(title)
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()
    print(f"Saved correlation matrix: {output_path}")

def plot_pairplot(df, title, output_path):
    """
    Create a pairplot (scatterplot matrix) to visualize pairwise relationships.
    """
    sns_plot = sns.pairplot(df)
    sns_plot.fig.suptitle(title, y=1.02)
    sns_plot.savefig(output_path)
    plt.close()
    print(f"Saved pair plot: {output_path}")

# -------------------------------
# Annotate and save random images with bounding boxes
# -------------------------------

def save_random_annotated_images(images_folder, labels_folder, output_folder, num_images=10):
    """
    Randomly select num_images from images_folder, draw the bounding boxes (with class labels)
    from the corresponding annotation files, and save the annotated images.
    """
    os.makedirs(output_folder, exist_ok=True)
    image_files = [f for f in os.listdir(images_folder) if f.lower().endswith('.jpg')]
    selected = random.sample(image_files, min(num_images, len(image_files)))
    
    for fname in selected:
        img_path = os.path.join(images_folder, fname)
        try:
            with Image.open(img_path) as img:
                draw = ImageDraw.Draw(img)
                # Look for a corresponding annotation file (assumes same basename + .txt)
                label_path = os.path.join(labels_folder, os.path.splitext(fname)[0] + ".txt")
                if os.path.exists(label_path):
                    with open(label_path, 'r') as f:
                        lines = f.readlines()
                    for line in lines:
                        parts = line.strip().split()
                        if len(parts) != 5:
                            continue
                        cls = parts[0]
                        try:
                            x_center, y_center, w_rel, h_rel = map(float, parts[1:])
                        except:
                            continue
                        img_width, img_height = img.size
                        x_center_abs = x_center * img_width
                        y_center_abs = y_center * img_height
                        w_abs = w_rel * img_width
                        h_abs = h_rel * img_height
                        left = int(max(x_center_abs - w_abs/2, 0))
                        top = int(max(y_center_abs - h_abs/2, 0))
                        right = int(min(x_center_abs + w_abs/2, img_width))
                        bottom = int(min(y_center_abs + h_abs/2, img_height))
                        draw.rectangle([(left, top), (right, bottom)], outline="red", width=2)
                        draw.text((left, top), f"{cls}", fill="red")
                # Save annotated image
                out_path = os.path.join(output_folder, "annotated_" + fname)
                img.save(out_path)
                print(f"Saved annotated image: {out_path}")
        except Exception as e:
            print(f"Error annotating image {img_path}: {e}")

# -------------------------------
# Main analysis
# -------------------------------

if __name__ == "__main__":
    # Set your paths here
    images_folder = "/home/bohbot/ultralytics/datasets/mos/mos_crop_update/images/val"
    labels_folder = "/home/bohbot/ultralytics/datasets/mos/mos_crop_update/labels/val"
    output_folder = "/home/bohbot/Evyatar/git/figures_for_supermodel"
    
    os.makedirs(output_folder, exist_ok=True)
    
    # ---- IMAGE-LEVEL ANALYSIS ----
    print("Computing image-level factors...")
    df_images = compute_all_image_factors(images_folder)
    if not df_images.empty:
        # Save DataFrame for inspection
        df_images.to_csv(os.path.join(output_folder, "image_factors.csv"), index=False)
        # Plot correlation matrix and pairplot
        plot_correlation_matrix(df_images[["Brightness", "Contrast", "Entropy", "Aspect_Ratio"]],
                                "Image Factors Correlation Matrix",
                                os.path.join(output_folder, "image_correlation_matrix.png"))
        plot_pairplot(df_images[["Brightness", "Contrast", "Entropy", "Aspect_Ratio"]],
                      "Image Factors Pair Plot",
                      os.path.join(output_folder, "image_pairplot.png"))
    else:
        print("No image factors computed.")

    # ---- BBOX-LEVEL ANALYSIS ----
    print("Computing bounding box factors...")
    df_bbox = compute_all_bbox_factors(images_folder, labels_folder)
    if not df_bbox.empty:
        # Save DataFrame for inspection
        df_bbox.to_csv(os.path.join(output_folder, "bbox_factors.csv"), index=False)
        # Plot correlation matrix and pairplot (for bbox factors)
        plot_correlation_matrix(df_bbox[["BBox_Brightness", "BBox_Contrast", "BBox_Entropy", "BBox_Aspect_Ratio"]],
                                "BBox Factors Correlation Matrix",
                                os.path.join(output_folder, "bbox_correlation_matrix.png"))
        plot_pairplot(df_bbox[["BBox_Brightness", "BBox_Contrast", "BBox_Entropy", "BBox_Aspect_Ratio"]],
                      "BBox Factors Pair Plot",
                      os.path.join(output_folder, "bbox_pairplot.png"))
    else:
        print("No bounding box factors computed.")

    # ---- Save 10 Random Annotated Images ----
    print("Saving 10 random annotated images...")
    annotated_output_folder = os.path.join(output_folder, "annotated_images")
    save_random_annotated_images(images_folder, labels_folder, annotated_output_folder, num_images=10)
    
    # Extra suggestion:
    # You might consider applying a PCA (or t-SNE/UMAP) to these factors to see clustering in your training data.
    # That could be added similarly to the pairplot.
